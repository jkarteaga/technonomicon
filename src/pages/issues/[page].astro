---
import { getCollection, getEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import romanize from "../../utils/romanize";

export async function getStaticPaths({paginate}) {
  const blogEntries = await getCollection("issues");
  return paginate(blogEntries.sort((a,b) => b.data.issue_number - a.data.issue_number), {pageSize: 3})

}

const { page } = Astro.props;

const allIssues = page.data
const IssueContents = await Promise.all(
  allIssues.map((issue) => issue.render())
);

const arrayRange = (start, stop, step) =>
    Array.from(
    { length: (stop - start) / step + 1 },
    (value, index) => start + index * step
    );


const pageRange = arrayRange(1, page.lastPage, 1)
console.log(pageRange)
---

<Layout>
  <div class="px-10">
    <div class="flex items-center justify-between">
      <h1 class="text-7xl mb-2">All issues</h1>

      <div class="join">
        {page.url.prev ? <a href={page.url.prev} class="join-item btn">«</a> : null}
        <a class="join-item btn">Page {page.currentPage}</a>
        {page.url.next ? <a href={page.url.next} class="join-item btn">»</a> : null}
      </div>
    </div>
    <div class="relative pb-10">
      {
        allIssues.map((issue,index) => (
          <div class="group border-t z-20 overflow-hidden last:border-b border-l rounded-t-sm shadow-[rgba(0,0,0,0.05)_0px_-2px_4px_0px] border-r">
            <a class="flex flex-col p-10" href={`/issues/${issue.slug}`}>
              <div class="flex w-full justify-between items-center text-4xl">
                <span class="max-w-2xl">{issue.data.title}</span>{" "}
                <span class="font-lithops text-8xl">
                  {romanize(issue.data.issue_number)}
                </span>
              </div>
            </a>
            <div class="block z-10 max-h-0 group-last:hidden group-hover:max-h-[50px] duration-1000 transition-all ease-in-out">
              <IssueContents[index].Content/>
            </div>
            <div class="z-10 hidden group-last:block">
              <IssueContents[index].Content/>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</Layout>
